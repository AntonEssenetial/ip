import fs from 'fs';
import Hapi from 'hapi';
import ModuleLoader from './loaders/module';

//load prototypes
require('./prototypes/strings.js')();

var App = {
	Globals:{
		ROOT:'./',
	}
};

App.Server = new Hapi.Server();
App.Winston = require('winston');

if(fs.existsSync('./config.js')) {
	App.Config = require('../config.js');
}else{
	//default configuration settings
	App.Config = {
		debug:true,
		http:{
			port:3000
		}
	}
}

if(App.Config.debug) {
	App.Winston.level = 'debug';
}

App.Server.connection({
	port:App.Config.http.port
});

var Router = require('./router.js')(App, App.Server);
App.Router = Router;


let Loader = {
	controllers:new ModuleLoader(App),
	services:new ModuleLoader(App),
	models:new ModuleLoader(App)
}

if(fs.existsSync('./services'))
	Loader.services.loadDirectory('Service', './services/');
if(fs.existsSync('./models'))
	Loader.models.loadDirectory('Model', './models/');
if(fs.existsSync('./controllers'))
	Loader.controllers.loadDirectory('Controller', './controllers/');

App.Loader = Loader;
//takes all modules from the models,services loaders and concats them into one array thats made available to the Controllers loader;
App.Loader.dependencies = Loader.services.modules.concat(Loader.models.modules);

App.boot = function() {

	Router.loadRouteFiles('./routes/');

	App.Server.start(function() {
		App.Winston.log('info', 'rapture is listening on port:' + App.Config.http.port);
	});
}

export default App;
