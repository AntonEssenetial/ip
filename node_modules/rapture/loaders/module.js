import fs from 'fs';

export default class ModuleLoader {
    constructor(App) {
        this.App = App;
        this.modules = [];
    }

    resolve(name) {
        var modulesLen = this.modules.length;

        for(var  i = 0; i < modulesLen; i++) {
            var localModule = this.modules[i];

            if(localModule.name === name)
                return localModule.module;
        }

        console.log('Module Loader Error: Could not resolve ' + name + ' be sure the file is named correctly!');

        return false;
    }

    build(name, dependencies) {

        var localModule = this.resolve(name);
        return this.process(localModule, dependencies);
    }

    construct(constructor, args) {
        function F() {
            return constructor.apply(this, args);
        }
        F.prototype = constructor.prototype;
        return new F();
    }

    process(func, dependencies) {
      var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
      var ARGUMENT_NAMES = /([^\s,]+)/g;
        var fnStr = func.toString().replace(STRIP_COMMENTS, '');
        var result = fnStr.slice(fnStr.indexOf('(')+1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);
        if(result === null)
           result = [];

      var dependenciesLen = dependencies.length;
      var resultLen = result.length;

      var injectors = [];
      for(var i = 0; i < resultLen; i++) {
          var name = result[i];
          for(var e = 0; e < dependenciesLen; e++) {
              var dependency = dependencies[e];

              if(dependency.name === name) {
                  //console.log('setting depend ' + name);

                  injectors.push(this.process(dependency.module, dependencies));
              }
          }
      }

      return this.construct(func, injectors);
    }

    exportModules() {
        var exportArray = {};
        for(var i = 0; i < this.modules.length; i++) {
            exportArray[this.modules[i].name] = this.modules[i].module;
        }
        return exportArray;
    }

    loadModule(name, path) {

        var localModule = require(path);

        this.modules.push({
            name:name,
            module:localModule
        });
    }

    loadDirectory(group, path) {
        var self = this;
        var files = fs.readdirSync(path);

        for(var i = 0; i < files.length; i++) {
            var fileName = files[i];
            var moduleName = fileName.split(".js").shift();

            self.loadModule(moduleName + group, "../../" + path + fileName);
        }
    }

}
